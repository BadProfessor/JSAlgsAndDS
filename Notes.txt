Book: George Polya, How To Solve It

How do you improve?
1. Devise a plan for solving problems
2. Master common problem solving patterns

Problem solving approach:
1. Understand the problem
2. Explore Concrete Examples
3. Break it down
4. Solve/Simplify
5. Look back and Refactor

Understand the problem:
1. Can I restate the problem in my own words?

2. What are the inputs that go into the problem?

3. What are the outputs that should come form the solution to the problem?

4. Can the outputs be determinded from the inputs? 
In other words, do I have enough information to  solve the problem?

5. How should I label the important pieces of data that are a part of the problem?

Exploring Concrete examples:
1. Start with Simple examples (input + output)
2. Progress to More Complex examples
3. Explore Examples with Empty Inputs
4. Explore Examples with Invalid Inputs

Break it down:
1. Explicitly write out the steps you need to take.

Simplify:
1. Find the core difficulty in what you're trying to do
2. Temporarily ignore that difficulty
3. Write a simplified solution
4. Then incorporate that difficulty back in

Look back and refactor:
1. Can you check the result?
2. Can you derive the result differently?
3. Can you understand at a glance?
4. Can you use the result or method for some other problem?
5. Can you improve the performance of your solution?
6. Can you think of other ways to refactor?
7. How have other people solved this problem?

Recap!
Understand the Problem
Explore Concrete Examples
Break It Down
Solve/Simplify
Look Back and Refactor

Problem solving patterns:
Frequency counter
Multiple pointers
Sliding Window
Divide and Conquer
Dynamic Programming
Greedy Algorithms
Backtracking

Frequency counter
This pattern uses objects or sets to collect values/frequencies of values

This can often avoid the need for nested loops or O(N^2) operations with arrays / strings

Anagrams
Given two strings, write a function to determine if the second string is an anagram of the first. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as cinema, formed from iceman.